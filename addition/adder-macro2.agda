-- adder-macro „Çí„ÇÇ„ÅÜÂ∞ë„ÅóÁ∂∫È∫ó„Å´Êõ∏„Åè„Åì„Å®„ÇíË©¶„Åø„Çã

module adder-macro2 where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Reflection using (newMeta)
open import Agda.Builtin.List using (List; _‚à∑_; [])
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Agda.Builtin.Reflection renaming (bindTC to _>>=_)

-- UNUSED : „ÅÑ„Åö„Çå‰Ωø„ÅÜ„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÅÆ„ÅßÊÆã„Åô
-- DELETE : Ê∂à„ÅôÂèØËÉΩÊÄß„ÅåÈ´ò„ÅÑ„Åå‰∏ÄÂøúÊÆã„Åó„Å¶„Åä„ÅÑ„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ

-- type
data typ : Set where
  Nat : typ
  
-- source term
mutual
  data value : typ ‚Üí Set where
    Num : (n : ‚Ñï) ‚Üí value Nat

  data term : typ ‚Üí Set where
    Val : {œÑ‚ÇÅ : typ} ‚Üí value œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ
    Add : term Nat ‚Üí term Nat ‚Üí term Nat

-- frame
data frame[_] : typ ‚Üí typ ‚Üí Set where
  Add‚ÇÅ : (e‚ÇÇ : term Nat) ‚Üí
         frame[ Nat ] Nat
  Add‚ÇÇ : (v‚ÇÅ : value Nat) ‚Üí
         frame[ Nat ] Nat

frame-plug : {œÑ‚ÇÅ œÑ‚ÇÇ : typ} ‚Üí
             frame[ œÑ‚ÇÇ ] œÑ‚ÇÅ ‚Üí
             term œÑ‚ÇÇ ‚Üí
             term œÑ‚ÇÅ
frame-plug (Add‚ÇÅ e‚ÇÇ) e‚ÇÅ = Add e‚ÇÅ e‚ÇÇ
frame-plug (Add‚ÇÇ v‚ÇÅ) e‚ÇÇ = Add (Val v‚ÇÅ) e‚ÇÇ

-- reduction relation (= preservation)
data Reduce : {œÑ‚ÇÅ : typ} ‚Üí
     term œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ ‚Üí Set where
  RAdd   : {n‚ÇÅ : ‚Ñï} ‚Üí
           {n‚ÇÇ : ‚Ñï} ‚Üí
           {n  : ‚Ñï} ‚Üí
           n‚ÇÅ + n‚ÇÇ ‚â° n ‚Üí
           Reduce (Add (Val (Num n‚ÇÅ)) (Val (Num n‚ÇÇ))) (Val (Num n))
  RFrame : {œÑ‚ÇÅ œÑ‚ÇÇ : typ} ‚Üí
           {e : term œÑ‚ÇÅ} ‚Üí
           {e‚Ä≤ : term œÑ‚ÇÅ} ‚Üí
           (f : frame[ œÑ‚ÇÅ ] œÑ‚ÇÇ) ‚Üí
           Reduce e e‚Ä≤ ‚Üí
           Reduce (frame-plug f e) (frame-plug f e‚Ä≤)

data Reduce* : {œÑ‚ÇÅ : typ} ‚Üí
     term œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ ‚Üí Set where
  R*Id    : {œÑ‚ÇÅ : typ} ‚Üí
            (e : term œÑ‚ÇÅ) ‚Üí
            Reduce* e e
  R*Trans : {œÑ‚ÇÅ : typ} ‚Üí
            (e‚ÇÅ : term œÑ‚ÇÅ) ‚Üí
            (e‚ÇÇ : term œÑ‚ÇÅ) ‚Üí
            (e‚ÇÉ : term œÑ‚ÇÅ) ‚Üí
            Reduce e‚ÇÅ e‚ÇÇ ‚Üí
            Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
            Reduce* e‚ÇÅ e‚ÇÉ

-- equational reasoning
-- see ‚â°-Reasoning in Relation.Binary.PropositionalEquality.agda

infix  3 _‚àé
infixr 2 _‚ü∂‚ü®_‚ü©_ _‚ü∂*‚ü®_‚ü©_ _‚â°‚ü®_‚ü©_
infix  1 begin_

begin_ : {œÑ : typ} ‚Üí
         {e‚ÇÅ e‚ÇÇ : term œÑ} ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÅ e‚ÇÇ
begin_ red = red

_‚ü∂‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí Reduce e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÇ e‚ÇÉ e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ

_‚ü∂*‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
            (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
            Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÅ} {e‚ÇÉ} (R*Id .e‚ÇÅ) e‚ÇÅ-red*-e‚ÇÉ = e‚ÇÅ-red*-e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÇ} {e‚ÇÉ} (R*Trans .e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÇ e‚ÇÅ-red-e‚ÇÅ‚Ä≤ e‚ÇÅ‚Ä≤-red*-e‚ÇÇ) e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÉ e‚ÇÅ-red-e‚ÇÅ‚Ä≤
          (e‚ÇÅ‚Ä≤ ‚ü∂*‚ü® e‚ÇÅ‚Ä≤-red*-e‚ÇÇ ‚ü© e‚ÇÇ-red*-e‚ÇÉ)

_‚â°‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí e‚ÇÅ ‚â° e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚â°‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} refl e‚ÇÇ-red*-e‚ÇÉ = e‚ÇÇ-red*-e‚ÇÉ

_‚àé : {œÑ : typ} ‚Üí
     (e : term œÑ) ‚Üí Reduce* e e
_‚àé e = R*Id e

------------------NumDefine-------------------------

-- 1
term1 : term Nat
term1 = Val (Num 1)

-- 2
term2 : term Nat
term2 = Val (Num 2)

-- 3
term3 : term Nat
term3 = Val (Num 3)

-- 4
term4 : term Nat
term4 = Val (Num 4)

-- 5
term5 : term Nat
term5 = Val (Num 5)

-- 12
term12 : term Nat
term12 = Val (Num 12)

-- (3 + 5) + 4
term35-4 : term Nat
term35-4 = Add (Add term3 term5) term4

-- 4 + (3 + 5)
term4-35 : term Nat
term4-35 = Add term4 (Add term3 term5)

-----------------macro-------------------------

macro
    showGoal : Term ‚Üí TC ‚ä§
    showGoal hole = do
        type ‚Üê inferType hole
        t ‚Üê quoteTC type
        typeError (termErr t ‚à∑ [])

macro
    showCtx : Term ‚Üí TC ‚ä§
    showCtx hole = do
        ctx ‚Üê getContext
        t   ‚Üê quoteTC ctx
        typeError (termErr t ‚à∑ [])

{- ùìãisible ùìáelevant ùí∂rgument -}
vra : {A : Set} ‚Üí A ‚Üí Arg A
vra = arg (arg-info visible relevant)

{- ùíΩidden ùìáelevant ùí∂rgument -}
hra : {A : Set} ‚Üí A ‚Üí Arg A
hra = arg (arg-info hidden relevant)

-- hole „ÅÆÊï∞„ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ„Åù„ÅÆÊï∞„Å†„Åë„ÅÆ hole „Çí List (Arg Term) „ÅÆÂΩ¢„ÅßËøî„Åô
create-multi-meta : (n : ‚Ñï) ‚Üí TC (List (Arg Term))
create-multi-meta zero    = returnTC []
create-multi-meta (suc n) =
  newMeta unknown >>= Œª m ‚Üí
  create-multi-meta n >>= Œª rest ‚Üí
  returnTC (vra m ‚à∑ rest)

-- hole „ÅÆÊï∞„Å® „Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø„ÅÆÂêçÂâç(?) „ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ„ÄÅhole „Çí TC (List (Arg Term)) „ÅÆÂΩ¢„ÅßËøî„Åô
create-meta-con : (n : ‚Ñï) ‚Üí (consName : Name) ‚Üí (hole : Term) ‚Üí TC (List (Arg Term))
create-meta-con n consName hole =
  create-multi-meta n >>= Œª ms ‚Üí
  unify hole (con consName ms) >>= Œª _ ‚Üí
  returnTC ms

-- hole „ÅÆÊï∞„Å® „Ç≥„É≥„Çπ„Éà„É©„ÇØ„Çø„ÅÆÂêçÂâç(?) „ÇíÂèó„ÅëÂèñ„Å£„Åü„Çâ„ÄÅhole „Çí TC (List (Arg Term)) „ÅÆÂΩ¢„ÅßËøî„Åô
create-meta-def : (n : ‚Ñï) ‚Üí (consName : Name) ‚Üí (hole : Term) ‚Üí TC (List (Arg Term))
create-meta-def n consName hole =
  create-multi-meta n >>= Œª ms ‚Üí
  unify hole (def consName ms) >>= Œª _ ‚Üí
  returnTC ms

-- TC (List (Arg Term)) „Çí hole „Å´ÂÖ•„Çå„Çâ„Çå„Çã„Çà„ÅÜ„Å™ÂΩ¢„Å´‰Ωø„ÅÜ„Åü„ÇÅ„ÅÆ„ÇÇ„ÅÆ
list-to-TC : (goal : List (Arg Term)) ‚Üí TC ‚ä§
list-to-TC []                         = returnTC tt
list-to-TC (arg _ currentgoal ‚à∑ rest) = list-to-TC rest

unify-arrow : (goal-list : List (Arg Term)) ‚Üí TC (List (Arg Term))
unify-arrow []                    = returnTC []
unify-arrow (arg _ x ‚à∑ goal-list) =
  create-meta-def 3 (quote _‚ü∂‚ü®_‚ü©_) x

unify-qed : (hole : Term) ‚Üí TC ‚ä§
unify-qed hole =
  create-meta-def 1 (quote _‚àé) hole >>= Œª ms ‚Üí
  list-to-TC ms

unify-begin‚ü∂ : (hole : Term) ‚Üí TC (List (Arg Term))
unify-begin‚ü∂ hole =
  create-meta-def 1 (quote begin_) hole >>= Œª l‚ÇÅ ‚Üí
  unify-arrow l‚ÇÅ

unify-Add‚ÇÅ : (hole : Term) ‚Üí TC Term
unify-Add‚ÇÅ hole =
  create-meta-con 2 (quote RFrame) hole >>=
  Œª { (arg _ x ‚à∑ arg _ y ‚à∑ []) ‚Üí
       create-meta-con 1 (quote Add‚ÇÅ) x >>= Œª _ ‚Üí
       reduce y
     ; e ‚Üí typeError (strErr "not correct list" ‚à∑ [])
     }

unify-Add‚ÇÇ : (hole : Term) ‚Üí TC Term
unify-Add‚ÇÇ hole =
  create-meta-con 2 (quote RFrame) hole >>=
  Œª { (arg _ x ‚à∑ arg _ y ‚à∑ []) ‚Üí
      create-meta-con 1 (quote Add‚ÇÇ) x >>= Œª _ ‚Üí
      reduce y
     ; e ‚Üí typeError (strErr "not correct list" ‚à∑ []) 
     }

unify-RAdd : (hole : Term) ‚Üí TC ‚ä§
unify-RAdd hole =
  create-meta-con 1 (quote RAdd) hole >>=
  -- >>= Œª ms ‚Üí list-to-TC ms
  Œª { (arg _ x ‚à∑ []) ‚Üí
      create-meta-con 0 (quote refl) x >>= Œª ms ‚Üí
      list-to-TC ms
     ; e ‚Üí typeError (strErr "not correct list" ‚à∑ [])
     }

-- macro „Å´ counter„Çí„Å§„Åë„Åü„ÇÇ„ÅÆ
-- main „ÅÆ macro „Å´„ÅØËá™ÁÑ∂Êï∞„ÅØÂºïÊï∞„Å´Âèñ„Çå„Å™„ÅÑ„ÅÆ„Åß„Åì„ÅÆ„Çà„ÅÜ„Å™ÂΩ¢„Å´„Åô„Çã
counter-reduce : (n : ‚Ñï) ‚Üí (hole : Term) ‚Üí TC ‚ä§
counter-reduce zero    hole = typeError (strErr "time out" ‚à∑ [])
counter-reduce (suc n) hole = inferType hole >>=
  Œª {  (def (quote Reduce*) args) ‚Üí
       unify-begin‚ü∂ hole >>=
       Œª {(arg _ m‚ÇÅ ‚à∑ arg _ m‚ÇÇ ‚à∑ arg _ m‚ÇÉ ‚à∑ []) ‚Üí
           catchTC
           (unify-qed m‚ÇÉ >>= Œª _ ‚Üí counter-reduce n m‚ÇÇ)
           (unify-arrow (vra m‚ÇÉ ‚à∑ []) >>= Œª ms ‚Üí list-to-TC ms >>= Œª _ ‚Üí
           counter-reduce n m‚ÇÇ >>= Œª _ ‚Üí
           counter-reduce n m‚ÇÉ)
         ; e ‚Üí typeError (strErr "uncorrect list" ‚à∑ [])
         }
     ; (def (quote Reduce) (_ ‚à∑ arg _ a ‚à∑ _ ‚à∑ []))
     ‚Üí reduce a >>=
     Œª { (con (quote Add) (arg _ x ‚à∑ arg _ y ‚à∑ []))
         ‚Üí reduce x >>=
         Œª { (con (quote Add) args) ‚Üí
             unify-Add‚ÇÅ hole >>= Œª m‚ÇÇ ‚Üí counter-reduce n m‚ÇÇ
            ; (con (quote Val) _)
              ‚Üí reduce y >>=
              Œª { (con (quote Add) _) ‚Üí
                  unify-Add‚ÇÇ hole >>= Œª m‚ÇÇ ‚Üí counter-reduce n m‚ÇÇ
                 ; (con (quote Val) _) ‚Üí
                   unify-RAdd hole
                 ; t ‚Üí typeError (strErr "not a Value" ‚à∑ [])
                 }
            ; t ‚Üí typeError (strErr "neither Add nor Val" ‚à∑ [])
            }
        ; t ‚Üí typeError (strErr "not an Add" ‚à∑ [])
        }
      ; t ‚Üí typeError (strErr "not reducetion" ‚à∑ [])
      }

-- main macro
macro
  runTC : (hole : Term) ‚Üí TC ‚ä§
  runTC hole = counter-reduce 10 hole


--------------------Test----------------------

-- 3 + 5 ‚ü∂*  8
test1 : Reduce* (Add term3 term5) (Val (Num 8))
test1 = Add term3 term5 ‚ü∂‚ü® RAdd refl ‚ü© Val (Num 8) ‚àé

-- (3 + 5) + 4 ‚ü∂* 12
test2 : Reduce* (Add (Add (Val (Num 3)) (Val (Num 5))) (Val (Num 4)))
                (Val (Num 12))
test2 = Add (Add (Val (Num 3)) (Val (Num 5))) (Val (Num 4)) ‚ü∂‚ü®
          RFrame (Add‚ÇÅ (Val (Num 4))) (RAdd refl) ‚ü©
          Add (Val (Num 8)) (Val (Num 4)) ‚ü∂‚ü® RAdd refl ‚ü© Val (Num 12) ‚àé

-- 4 + (3 + 5) ‚ü∂* 12
test3 : Reduce* term4-35 term12
test3 = term4-35 ‚ü∂‚ü® RFrame (Add‚ÇÇ (Num 4)) (RAdd refl) ‚ü©
          Add (Val (Num 4)) (Val (Num 8)) ‚ü∂‚ü® RAdd refl ‚ü© term12 ‚àé

-- (2 + 4) + (3 + 5) ‚ü∂* 14
test4 : Reduce* (Add (Add (Val (Num 2)) (Val (Num 4))) (Add term3 term5)) (Val (Num 14))
test4 = Add (Add (Val (Num 2)) (Val (Num 4))) (Add term3 term5) ‚ü∂‚ü®
          RFrame (Add‚ÇÅ (Add term3 term5)) (RAdd refl) ‚ü©
          Add (Val (Num 6)) (Add term3 term5) ‚ü∂‚ü®
          RFrame (Add‚ÇÇ (Num 6)) (RAdd refl) ‚ü©
          Add (Val (Num 6)) (Val (Num 8)) ‚ü∂‚ü® RAdd refl ‚ü© Val (Num 14) ‚àé

-- 1 + (2 + 3) + 4 ‚ü∂* 10
test5 : Reduce* (Add term1 (Add (Add term2 term3) term4)) (Val (Num 10))
test5 = Add term1 (Add (Add term2 term3) term4) ‚ü∂‚ü®
          RFrame (Add‚ÇÇ (Num 1)) (RFrame (Add‚ÇÅ term4) (RAdd refl)) ‚ü©
          Add (Val (Num 1)) (Add (Val (Num 5)) term4) ‚ü∂‚ü®
          RFrame (Add‚ÇÇ (Num 1)) (RAdd refl) ‚ü©
          Add (Val (Num 1)) (Val (Num 9)) ‚ü∂‚ü® RAdd refl ‚ü© Val (Num 10) ‚àé
