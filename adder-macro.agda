-- Ë∂≥„ÅóÁÆóË®ÄË™û„Çí macro „Çí‰Ωø„Å£„Å¶Ë®ºÊòé„Åó„Å¶„Åø„Çã

module adder-macro where

open import Data.Nat
open import Data.Unit using (‚ä§; tt)
open import Reflection using (newMeta)
open import Agda.Builtin.List using (_‚à∑_; [])
open import Relation.Binary.PropositionalEquality using (_‚â°_; refl)
open import Agda.Builtin.Reflection renaming (bindTC to _>>=_)

-- macro
macro
    showGoal : Term ‚Üí TC ‚ä§
    showGoal hole = do
        type ‚Üê inferType hole
        t ‚Üê quoteTC type
        typeError (termErr t ‚à∑ [])

macro
    showCtx : Term ‚Üí TC ‚ä§
    showCtx hole = do
        ctx ‚Üê getContext
        t   ‚Üê quoteTC ctx
        typeError (termErr t ‚à∑ [])

-- type
data typ : Set where
  Nat : typ
  
-- source term
mutual
  data value : typ ‚Üí Set where
    Num : (n : ‚Ñï) ‚Üí value Nat

  data term : typ ‚Üí Set where
    Val : {œÑ‚ÇÅ : typ} ‚Üí value œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ
    Add : term Nat ‚Üí term Nat ‚Üí term Nat

-- frame
data frame[_] : typ ‚Üí typ ‚Üí Set where
  Add‚ÇÅ : (e‚ÇÇ : term Nat) ‚Üí
         frame[ Nat ] Nat
  Add‚ÇÇ : (v‚ÇÅ : value Nat) ‚Üí
         frame[ Nat ] Nat

frame-plug : {œÑ‚ÇÅ œÑ‚ÇÇ : typ} ‚Üí
             frame[ œÑ‚ÇÇ ] œÑ‚ÇÅ ‚Üí
             term œÑ‚ÇÇ ‚Üí
             term œÑ‚ÇÅ
frame-plug (Add‚ÇÅ e‚ÇÇ) e‚ÇÅ = Add e‚ÇÅ e‚ÇÇ
frame-plug (Add‚ÇÇ v‚ÇÅ) e‚ÇÇ = Add (Val v‚ÇÅ) e‚ÇÇ

-- reduction relation (= preservation)
data Reduce : {œÑ‚ÇÅ : typ} ‚Üí
     term œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ ‚Üí Set where
  RAdd   : {n‚ÇÅ : ‚Ñï} ‚Üí
           {n‚ÇÇ : ‚Ñï} ‚Üí
           {n  : ‚Ñï} ‚Üí
           n‚ÇÅ + n‚ÇÇ ‚â° n ‚Üí
           Reduce (Add (Val (Num n‚ÇÅ)) (Val (Num n‚ÇÇ))) (Val (Num n))
  RFrame : {œÑ‚ÇÅ œÑ‚ÇÇ : typ} ‚Üí
           {e : term œÑ‚ÇÅ} ‚Üí
           {e‚Ä≤ : term œÑ‚ÇÅ} ‚Üí
           (f : frame[ œÑ‚ÇÅ ] œÑ‚ÇÇ) ‚Üí
           Reduce e e‚Ä≤ ‚Üí
           Reduce (frame-plug f e) (frame-plug f e‚Ä≤)

data Reduce* : {œÑ‚ÇÅ : typ} ‚Üí
     term œÑ‚ÇÅ ‚Üí term œÑ‚ÇÅ ‚Üí Set where
  R*Id    : {œÑ‚ÇÅ : typ} ‚Üí
            (e : term œÑ‚ÇÅ) ‚Üí
            Reduce* e e
  R*Trans : {œÑ‚ÇÅ : typ} ‚Üí
            (e‚ÇÅ : term œÑ‚ÇÅ) ‚Üí
            (e‚ÇÇ : term œÑ‚ÇÅ) ‚Üí
            (e‚ÇÉ : term œÑ‚ÇÅ) ‚Üí
            Reduce e‚ÇÅ e‚ÇÇ ‚Üí
            Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
            Reduce* e‚ÇÅ e‚ÇÉ

-- equational reasoning
-- see ‚â°-Reasoning in Relation.Binary.PropositionalEquality.agda

infix  3 _‚àé
infixr 2 _‚ü∂‚ü®_‚ü©_ _‚ü∂*‚ü®_‚ü©_ _‚â°‚ü®_‚ü©_
infix  1 begin_

begin_ : {œÑ : typ} ‚Üí
         {e‚ÇÅ e‚ÇÇ : term œÑ} ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÅ e‚ÇÇ
begin_ red = red

_‚ü∂‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí Reduce e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÇ e‚ÇÉ e‚ÇÅ-red-e‚ÇÇ e‚ÇÇ-red*-e‚ÇÉ

_‚ü∂*‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
            (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí Reduce* e‚ÇÅ e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
            Reduce* e‚ÇÅ e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÅ} {e‚ÇÉ} (R*Id .e‚ÇÅ) e‚ÇÅ-red*-e‚ÇÉ = e‚ÇÅ-red*-e‚ÇÉ
_‚ü∂*‚ü®_‚ü©_ e‚ÇÅ {.e‚ÇÇ} {e‚ÇÉ} (R*Trans .e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÇ e‚ÇÅ-red-e‚ÇÅ‚Ä≤ e‚ÇÅ‚Ä≤-red*-e‚ÇÇ) e‚ÇÇ-red*-e‚ÇÉ =
  R*Trans e‚ÇÅ e‚ÇÅ‚Ä≤ e‚ÇÉ e‚ÇÅ-red-e‚ÇÅ‚Ä≤
          (e‚ÇÅ‚Ä≤ ‚ü∂*‚ü® e‚ÇÅ‚Ä≤-red*-e‚ÇÇ ‚ü© e‚ÇÇ-red*-e‚ÇÉ)

_‚â°‚ü®_‚ü©_ : {œÑ : typ} ‚Üí
           (e‚ÇÅ {e‚ÇÇ e‚ÇÉ} : term œÑ) ‚Üí e‚ÇÅ ‚â° e‚ÇÇ ‚Üí Reduce* e‚ÇÇ e‚ÇÉ ‚Üí
           Reduce* e‚ÇÅ e‚ÇÉ
_‚â°‚ü®_‚ü©_ e‚ÇÅ {e‚ÇÇ} {e‚ÇÉ} refl e‚ÇÇ-red*-e‚ÇÉ = e‚ÇÇ-red*-e‚ÇÉ

_‚àé : {œÑ : typ} ‚Üí
     (e : term œÑ) ‚Üí Reduce* e e
_‚àé e = R*Id e

------------------NumDefine-------------------------

-- 1
term1 : term Nat
term1 = Val (Num 1)

-- 2
term2 : term Nat
term2 = Val (Num 2)

-- 3
term3 : term Nat
term3 = Val (Num 3)

-- 4
term4 : term Nat
term4 = Val (Num 4)

-- 5
term5 : term Nat
term5 = Val (Num 5)

-- 12
term12 : term Nat
term12 = Val (Num 12)

-- (3 + 5) + 4
term35-4 : term Nat
term35-4 = Add (Add term3 term5) term4

-- 4 + (3 + 5)
term4-35 : term Nat
term4-35 = Add term4 (Add term3 term5)

-----------------Proof1-------------------------

{- ùìãisible ùìáelevant ùí∂rgument -}
vra : {A : Set} ‚Üí A ‚Üí Arg A
vra = arg (arg-info visible relevant)

{- ùíΩidden ùìáelevant ùí∂rgument -}
hra : {A : Set} ‚Üí A ‚Üí Arg A
hra = arg (arg-info hidden relevant) 

-- macro
--   unify-reduce : (hole : Term) ‚Üí TC ‚ä§
--   unify-reduce hole = inferType hole >>=
--     Œª{ (def (quote Reduce)
--             (_ ‚à∑ arg _ (con (quote Add) (_ ‚à∑ _ ‚à∑ []))  ‚à∑ _ ‚à∑ []))
--        ‚Üí newMeta unknown >>= Œª m
--        ‚Üí unify hole (con (quote RAdd) (vra m ‚à∑ []))

-- doË®òÊ≥ï„ÅßÊõ∏„ÅÑ„Åü„ÇÇ„ÅÆ
-- macro
--   unify-reduce : (hole : Term) ‚Üí TC ‚ä§
--   unify-reduce hole = do
--     m ‚Üê newMeta unknown
--     (def (quote Reduce)
--          (_ ‚à∑ arg _ (con (quote Add) (_ ‚à∑ _ ‚à∑ [])) ‚à∑ _ ‚à∑ [])) ‚Üê inferType hole
--        where unknown ‚Üí typeError (strErr "not a number!" ‚à∑ [])
--     unify hole (con (quote RAdd) (vra m ‚à∑ []))
     

-- RAdd „Å® RFrame „ÇíÂå∫Âà•„Åô„Çã„ÇÇ„ÅÆ
macro
  unify-reduce : (hole : Term) ‚Üí TC ‚ä§
  unify-reduce hole = inferType hole >>=
    Œª { (def (quote Reduce)
              (_ ‚à∑ arg _ a ‚à∑ _ ‚à∑ []))
              -- frame-plug „ÅÆÂΩ¢„Å´„Å™„Å£„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÇíËÄÉ„Åà„Å¶
              ‚Üí reduce a >>=
              Œª { (con (quote Add) (arg _ x ‚à∑ arg _ y ‚à∑ []))
                 --  term3 „ÅÆ„Çà„ÅÜ„Å™ÂΩ¢„Å´„Å™„Å£„Å¶„ÅÑ„Çã„Å®„Åç„ÅÆ„Åì„Å®„ÇíËÄÉ„Åà„Å¶
                 ‚Üí reduce x >>=
                 Œª { (con (quote Val) _) ‚Üí
                    reduce y >>=
                    Œª { (con (quote Val) _) ‚Üí
                       newMeta unknown >>= Œª m ‚Üí
                       -- unify hole (con (quote RAdd) (vra m ‚à∑ []))
                       unify hole (con (quote RAdd) (vra (con ((quote refl)) []) ‚à∑ []))
                       ; (con (quote Add) _) ‚Üí
                       newMeta unknown >>= Œª m‚ÇÅ ‚Üí
                       newMeta unknown >>= Œª m‚ÇÇ ‚Üí
                       unify hole (con (quote RFrame) (vra (con (quote Add‚ÇÇ) (vra m‚ÇÅ ‚à∑ [])) ‚à∑ vra m‚ÇÇ ‚à∑ []))
                       ; t ‚Üí typeError (termErr y ‚à∑ [])
                       }
                    ; (con (quote Add) _) ‚Üí
                     newMeta unknown >>= Œª m‚ÇÅ ‚Üí
                     newMeta unknown >>= Œª m‚ÇÇ ‚Üí
                     unify hole (con (quote RFrame) (vra (con (quote Add‚ÇÅ) (vra m‚ÇÅ ‚à∑ [])) ‚à∑ vra m‚ÇÇ ‚à∑ []))
                    ; t ‚Üí typeError (strErr "unacceptable type" ‚à∑ [])
                    }
                  ; t ‚Üí typeError (strErr "Not Add type" ‚à∑ []) 
                  }
             -- ‚Üí reduce x >>= Œª r
             -- ‚Üí inferType hole >>= Œª i
             --   ‚Üí quoteTC i >> Œª q
             -- ‚Üí normalise x >>= Œª n
             -- ‚Üí typeError (termErr x ‚à∑ [])
       ; (def (quote _‚â°_) _)
         ‚Üí unify hole (con ((quote refl)) [])
       ; t ‚Üí typeError (strErr "not a reduction" ‚à∑ [])
       }

-- 3 + 5 ‚ü∂ 8
test1 : Reduce* (Add term3 term5) (Val (Num 8))
test1 =
  begin
    Add term3 term5
  ‚ü∂‚ü® RAdd refl ‚ü©
    Val (Num 8)
  ‚àé

-- (3 + 5) + 4
test2 : Reduce* term35-4 term12
test2 =
  begin
    Add (Add term3 term5) term4
  ‚ü∂‚ü® RFrame (Add‚ÇÅ term4) (RAdd refl) ‚ü©
    frame-plug (Add‚ÇÅ term4) (Val (Num (3 + 5)))
  ‚ü∂‚ü® RAdd refl ‚ü©
    term12
  ‚àé

-- 4 + (3 + 5)
test3 : Reduce* term4-35 term12
test3 =
  begin
    Add (Val (Num 4)) (Add (Val (Num 3)) (Val (Num 5)))
  ‚ü∂‚ü® RFrame (Add‚ÇÇ (Num 4)) (RAdd refl) ‚ü©
    frame-plug (Add‚ÇÇ (Num 4)) (Val (Num (3 + 5)))
  ‚ü∂‚ü® RAdd refl ‚ü©
    Val (Num 12)
  ‚àé

-- (2 + 4) + (3 + 5) ‚ü∂* 14
test4 : Reduce* (Add (Add (Val (Num 2)) (Val (Num 4))) (Add term3 term5)) (Val (Num 14))
test4 =
  begin
    Add (Add (Val (Num 2)) (Val (Num 4))) (Add (Val (Num 3)) (Val (Num 5)))
   ‚ü∂‚ü® RFrame (Add‚ÇÅ (Add (Val (Num 3)) (Val (Num 5)))) (RAdd refl) ‚ü©
     frame-plug (Add‚ÇÅ (Add (Val (Num 3)) (Val (Num 5)))) (Val (Num (2 + 4)))
   ‚ü∂‚ü® RFrame (Add‚ÇÇ (Num 6)) (RAdd refl) ‚ü©
     frame-plug (Add‚ÇÇ (Num 6)) (Val (Num (3 + 5)))
   ‚ü∂‚ü® RAdd refl ‚ü©
     Val (Num 14)
   ‚àé

-- 1 + (2 + 3) + 4
test5 : Reduce* (Add term1 (Add (Add term2 term3) term4)) (Val (Num 10))
test5 =
  begin
    Add term1 (Add (Add term2 term3) term4)
  ‚ü∂‚ü® RFrame (Add‚ÇÇ (Num 1)) (RFrame (Add‚ÇÅ term4) (RAdd refl)) ‚ü©
    frame-plug (Add‚ÇÇ (Num 1)) (frame-plug (Add‚ÇÅ term4) (Val (Num (2 + 3))))
  ‚ü∂‚ü® RFrame (Add‚ÇÇ (Num 1)) (RAdd refl) ‚ü©
    frame-plug (Add‚ÇÇ (Num 1)) (Val (Num (2 + 3 + 4)))
  ‚ü∂‚ü® RAdd refl ‚ü©
    Val (Num 10)
  ‚àé

